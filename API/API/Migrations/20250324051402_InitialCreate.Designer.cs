// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250324051402_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HistorialParcela", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitud")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitud")
                        .HasColumnType("double precision");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ParcelaId")
                        .HasColumnType("integer");

                    b.Property<string>("Responsable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoCultivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UltimoRiego")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParcelaId");

                    b.ToTable("HistorialParcelas");
                });

            modelBuilder.Entity("HistorialSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Humedad")
                        .HasColumnType("double precision");

                    b.Property<double>("Lluvia")
                        .HasColumnType("double precision");

                    b.Property<int>("SensorId")
                        .HasColumnType("integer");

                    b.Property<int>("Sol")
                        .HasColumnType("integer");

                    b.Property<double>("Temperatura")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("HistorialSensores");
                });

            modelBuilder.Entity("Parcela", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Estado")
                        .HasColumnType("boolean");

                    b.Property<double>("Latitud")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitud")
                        .HasColumnType("double precision");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Responsable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TipoCultivo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ubicacion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UltimoRiego")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Parcelas");
                });

            modelBuilder.Entity("Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Humedad")
                        .HasColumnType("double precision");

                    b.Property<double>("Lluvia")
                        .HasColumnType("double precision");

                    b.Property<int>("ParcelaId")
                        .HasColumnType("integer");

                    b.Property<int>("Sol")
                        .HasColumnType("integer");

                    b.Property<double>("Temperatura")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ParcelaId")
                        .IsUnique();

                    b.ToTable("Sensores");
                });

            modelBuilder.Entity("HistorialParcela", b =>
                {
                    b.HasOne("Parcela", "Parcela")
                        .WithMany("HistorialParcelas")
                        .HasForeignKey("ParcelaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcela");
                });

            modelBuilder.Entity("HistorialSensor", b =>
                {
                    b.HasOne("Sensor", "Sensor")
                        .WithMany("HistorialSensores")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Sensor", b =>
                {
                    b.HasOne("Parcela", "Parcela")
                        .WithOne("Sensor")
                        .HasForeignKey("Sensor", "ParcelaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcela");
                });

            modelBuilder.Entity("Parcela", b =>
                {
                    b.Navigation("HistorialParcelas");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Sensor", b =>
                {
                    b.Navigation("HistorialSensores");
                });
#pragma warning restore 612, 618
        }
    }
}
